import { Test, TestingModule } from '@nestjs/testing';
import { INestApplication } from '@nestjs/common';
import * as request from 'supertest';
import { TypeOrmModule } from '@nestjs/typeorm';

// Entit√© simple pour les tests
import {
  Entity,
  Column,
  PrimaryGeneratedColumn,
  CreateDateColumn,
  UpdateDateColumn,
} from 'typeorm';

@Entity()
export class TestFood {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column()
  name: string;

  @Column()
  aisle: string;

  @Column()
  icon: string;

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;
}

// Contr√¥leur de test tr√®s simple
import { Controller, Get, Post, Body, HttpCode } from '@nestjs/common';
import { Repository } from 'typeorm';
import { InjectRepository } from '@nestjs/typeorm';

@Controller('test-foods')
export class TestFoodController {
  constructor(
    @InjectRepository(TestFood) private foodRepository: Repository<TestFood>,
  ) {}

  @Get()
  async findAll(): Promise<any[]> {
    const foods = await this.foodRepository.find();
    return foods.map((food) => ({
      id: food.id,
      name: food.name,
      aisle: food.aisle,
      icon: food.icon,
    }));
  }

  @Post()
  @HttpCode(201)
  async create(@Body() createFoodDto: any): Promise<any> {
    const food = new TestFood();
    food.name = createFoodDto.name;
    food.aisle = createFoodDto.aisle;
    food.icon = createFoodDto.icon;

    const savedFood = await this.foodRepository.save(food);

    return {
      id: savedFood.id,
      name: savedFood.name,
      aisle: savedFood.aisle,
      icon: savedFood.icon,
    };
  }
}

describe("Test d'int√©gration minimal - Flux complet", () => {
  let app: INestApplication;
  let foodRepository: Repository<TestFood>;

  beforeAll(async () => {
    // Configuration de l'application de test
    const moduleFixture: TestingModule = await Test.createTestingModule({
      imports: [
        // Base de donn√©es SQLite en m√©moire pour les tests
        TypeOrmModule.forRoot({
          type: 'sqlite' as const,
          database: ':memory:',
          entities: [TestFood],
          synchronize: true,
          logging: false,
        }),
        TypeOrmModule.forFeature([TestFood]),
      ],
      controllers: [TestFoodController],
    }).compile();

    app = moduleFixture.createNestApplication();
    foodRepository =
      moduleFixture.get<Repository<TestFood>>('TestFoodRepository');

    await app.init();
  });

  afterAll(async () => {
    await app.close();
  });

  beforeEach(async () => {
    // Nettoyer la base avant chaque test
    await foodRepository.clear();
  });

  describe('Flux complet: Requ√™te HTTP ‚Üí Contr√¥leur ‚Üí Base ‚Üí R√©ponse', () => {
    it("devrait cr√©er un aliment via l'API et le v√©rifier en base", async () => {
      console.log("üß™ Test: Cr√©ation d'un aliment via l'API");

      // ARRANGE - Pr√©parer les donn√©es de test
      const newFoodData = {
        name: 'Pomme',
        aisle: 'Fruits',
        icon: 'üçé',
      };

      // ACT 1 - Cr√©er un aliment via l'API HTTP
      const createResponse = await request(app.getHttpServer())
        .post('/test-foods')
        .send(newFoodData)
        .expect(201);

      console.log('‚úÖ Aliment cr√©√© via API:', createResponse.body);

      // ASSERT 1 - V√©rifier la r√©ponse de l'API
      expect(createResponse.body).toMatchObject({
        name: 'Pomme',
        aisle: 'Fruits',
        icon: 'üçé',
      });
      expect(createResponse.body.id).toBeDefined();

      // ACT 2 - V√©rifier directement en base de donn√©es
      const dbFood = await foodRepository.findOne({
        where: { name: 'Pomme' },
      });

      console.log('‚úÖ Aliment r√©cup√©r√© directement en base:', dbFood);

      // ASSERT 2 - V√©rifier que les donn√©es sont bien persist√©es en base
      expect(dbFood).toBeDefined();
      expect(dbFood.name).toBe('Pomme');
      expect(dbFood.aisle).toBe('Fruits');
      expect(dbFood.icon).toBe('üçé');

      // ASSERT 3 - V√©rifier la coh√©rence entre API et base de donn√©es
      expect(createResponse.body.id).toBe(dbFood.id);
      expect(createResponse.body.name).toBe(dbFood.name);
      expect(createResponse.body.aisle).toBe(dbFood.aisle);
      expect(createResponse.body.icon).toBe(dbFood.icon);

      console.log('üéØ Test r√©ussi: Flux complet v√©rifi√©!');
    });

    it("devrait lister les aliments via l'API", async () => {
      console.log('üß™ Test: R√©cup√©ration de tous les aliments');

      // ARRANGE - Cr√©er des aliments directement en base
      const testFoods = [
        { name: 'Pomme', aisle: 'Fruits', icon: 'üçé' },
        { name: 'Banane', aisle: 'Fruits', icon: 'üçå' },
      ];

      for (const foodData of testFoods) {
        const food = new TestFood();
        food.name = foodData.name;
        food.aisle = foodData.aisle;
        food.icon = foodData.icon;
        await foodRepository.save(food);
      }

      // ACT - R√©cup√©rer tous les aliments via l'API
      const response = await request(app.getHttpServer())
        .get('/test-foods')
        .expect(200);

      console.log('‚úÖ Aliments r√©cup√©r√©s via API:', response.body);

      // ASSERT - V√©rifier la r√©ponse
      expect(response.body).toHaveLength(2);

      // V√©rifier la structure des donn√©es
      response.body.forEach((food: any) => {
        expect(food).toHaveProperty('id');
        expect(food).toHaveProperty('name');
        expect(food).toHaveProperty('aisle');
        expect(food).toHaveProperty('icon');
      });

      // V√©rifier que les donn√©es correspondent √† celles cr√©√©es
      const expectedNames = testFoods.map((f) => f.name);
      const actualNames = response.body.map((f: any) => f.name);
      expect(actualNames).toEqual(expect.arrayContaining(expectedNames));

      console.log('üéØ Test r√©ussi: Liste des aliments r√©cup√©r√©e correctement!');
    });
  });
});
